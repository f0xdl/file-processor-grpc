# https://taskfile.dev

version: '3'
tasks:
  install:
    desc: "Install all tools"
    cmds:
      - echo "TODO"

  #LAUNCH
  launch:client:
    desc: "Build and start web-client"
    cmds:
      - go run ./cmd/client/main.go
    dotenv: [ "./deploy/.env.dev" ]
  launch:service:
    desc: "Build and start file-service"
    cmds:
      - go run ./cmd/file-service/main.go
    dotenv: [ "./deploy/.env.dev" ]
  launch:all:
    desc: "Build and start file-service & web-client"
    deps:
      - launch:client
      - launch:service
    cmds:
      - echo "Both done"

  #FORMAT 
  lint:
    desc: "Lint the code"
    cmds:
      - golangci-lint run ./... --config=./.golangci.yml
  clean:
    desc: "Clean the build artifacts"
    cmds:
      - rm -rf build/bin/
      - rm -rf api/generated/

  #DEPLOY
  debug:docker:
    desc: "Run services with delve debugger"
    dir: deploy
    cmds:
      - docker-compose -p file-processor-grpc-debug -f docker-compose.debug.yml up --build
  deploy:docker:
      desc: "Build and deploy services to docker"
      dir: deploy
      cmds:
          - docker-compose -p file-processor-grpc-production down
          - docker-compose -p file-processor-grpc-production up --build -d
  deploy:loki:
      desc: "Deploy docker logging system"
      dir: deploy/loki
      cmds:
          - docker-compose -p loki down
          - docker-compose -p loki up --build -d
  
  #TESTS
  test:
    desc: "Run tests"
    cmds:
      - go test ./...

  # CODE GENERATORS 
  #  gen:env:
  gen:proto:
    desc: "Generate go files from  protobuf scheme"
    vars:
      PATH_OUT: api/generated
      PATH_IN: api/proto
    cmds:
      - mkdir -p {{.PATH_OUT}}
      - >
        protoc
        --proto_path={{.PATH_IN}} 
        --go_out={{.PATH_OUT}} --go_opt=paths=source_relative 
        --go-grpc_out={{.PATH_OUT}} --go-grpc_opt=paths=source_relative 
        {{.PATH_IN}}/fileprocessor/*.proto


